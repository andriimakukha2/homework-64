const express = require("express");
const passport = require("passport");
const bcrypt = require("bcryptjs");
const LocalStrategy = require("passport-local").Strategy;
const flash = require("connect-flash");
const User = require("../models/User");

const router = express.Router();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó Passport
passport.use(
    new LocalStrategy({ usernameField: "email" }, async (email, password, done) => {
        try {
            const user = await User.findOne({ email });
            if (!user) return done(null, false, { message: "User not found" });

            const isMatch = await bcrypt.compare(password, user.password);
            return isMatch ? done(null, user) : done(null, false, { message: "Incorrect password" });
        } catch (err) {
            return done(err);
        }
    })
);

passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findById(id);
        done(null, user);
    } catch (err) {
        done(err);
    }
});

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function isAuthenticated(req, res, next) {
    if (req.isAuthenticated()) return next();
    req.flash("error", "You need to log in first");
    res.redirect("/auth");
}

// –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
router.get("/", (req, res) => {
    res.render("auth", {
        title: "Authorization",
        theme: req.session.theme || "light",
        error: req.flash("error"),
        user: req.user || null,
    });
});

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ MongoDB
router.post("/register", async (req, res) => {
    try {
        console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:", req.body);

        const { name, email, password, passwordConfirm, age } = req.body;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!name || !email || !password || !passwordConfirm || !age) {
            req.flash("error", "All fields are required");
            return res.redirect("/auth");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–∫—É
        if (isNaN(age) || age < 18 || age > 100) {
            req.flash("error", "Age must be a valid number between 18 and 100");
            return res.redirect("/auth");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if (password !== passwordConfirm) {
            req.flash("error", "Passwords do not match");
            return res.redirect("/auth");
        }

        if (await User.findOne({ email })) {
            req.flash("error", "User already exists");
            return res.redirect("/auth");
        }

        // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, 10);
        console.log("üîë –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å:", hashedPassword);

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const newUser = new User({ name, email, password: hashedPassword, age });
        await newUser.save();

        console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π:", newUser);

        req.login(newUser, (err) => {
            if (err) return next(err);
            return res.redirect("/protected");
        });
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
        req.flash("error", "Registration error");
        res.redirect("/auth");
    }
});

// –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post("/login", (req, res, next) => {
    passport.authenticate("local", (err, user, info) => {
        if (err) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", err);
            req.flash("error", "Authentication error");
            return res.redirect("/auth");
        }
        if (!user) {
            req.flash("error", info.message || "Invalid credentials");
            return res.redirect("/auth");
        }

        req.logIn(user, (err) => {
            if (err) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É:", err);
                req.flash("error", "Login error");
                return res.redirect("/auth");
            }

            console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤:", user);
            return res.redirect("/protected");
        });
    })(req, res, next);
});

// –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get("/logout", (req, res) => {
    req.logout((err) => {
        if (err) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:", err);
            return next(err);
        }
        req.session.destroy(() => res.redirect("/"));
    });
});

// –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
router.get("/protected", isAuthenticated, (req, res) => {
    console.log("Authenticated User:", req.user); // Debugging line
    res.send(`<h1>Welcome, ${req.user.name}</h1><br><a href="/logout">Logout</a>`);
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö)
router.get("/users", isAuthenticated, async (req, res) => {
    try {
        const users = await User.find({}, "name email age");
        res.render("users", { title: "Users List", users });
    } catch (error) {
        console.error("‚ùå Error fetching users:", error);
        res.status(500).send("Internal Server Error");
    }
});

module.exports = { router };